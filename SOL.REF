* MAIN_expr ::= ASSIGN_expr | MAIN_expr , ASSIGN_expr
* ASSIGN_expr ::= COND_expr | VAR ASSIGN_op ASSIGN_expr
* ASSIGN_op ::= = | += | -= | *= | /= | %= | <<= | >>=
* COND_expr ::= OR_expr | OR_expr ? COND_expr : COND_expr
* OR_expr ::= BINARY_AND_expr | OR_expr || BINARY_AND_expr
* AND_expr ::= EQ_expr | AND_expr && EQ_expr
* EQ_expr ::= GE_expr | EQ_expr EQ_op GE_expr
* EQ_op ::= == | !=
* GE_expr ::= SHIFT_expr | GE_expr GE_op SHIFT_expr
* GE_op ::= < | <= | > | >=
* SHIFT_expr ::= SUM_expr | SHIFT_expr SHIFT_op SUM_expr
* SHIFT_op ::= << | >>
* SUM_expr ::= MUL_expr | SUM_expr SUM_op MUL_expr
* SUM_op ::= + | -
* MUL_expr ::= UNARY_expr | MUL_expr MUL_op UNARY_expr
* MUL_op ::= * | / | %
* UNARY_expr ::= POSTFIX_expr | UNARY_op UNARY_expr
* UNARY_op ::= ! | ++ | -- | + | -
* POSTFIX_expr ::= PRIME_expr | POSTFIX1_expr
* POSTFIX1_expr ::= VAR | POSTFIX1_expr POSTFIX1_op
* POSTFIX1_op ::= ++ | --
* PRIME_expr ::= VAR | DIGITS | (MAIN_expr)


  start
  entry go
  extrn NUMB,SYMB,CVD,CVB,BR,CP,RP
  extrn DIV,MUL,ADD,SUB,NREL,DR,M1
  extrn PROUT,CARD,PROUTM,ERROR,APPLY
  empty PLUSASGN, MINUSASGN, MULASGN, DIVASGN, REMASGN, LSHIFTASGN, RSHIFTASGN, EQ, NE, GE, LE, LSHIFT, RSHIFT, PP, MM, OR, AND, UMINUS, UPLUS
  
go = <eval<card>>
*go = <apply /eval/ <card>>

eval
  e1 = <cvd <MAIN_expr <preprocess e1>>>

MAIN_expr
  R v1','v2 = <rp 'trash='<MAIN_expr v1>><ASSIGN_expr v2>
  v1        = <ASSIGN_expr v1>

ASSIGN_expr
  v1s('='/PLUSASGN//MINUSASGN//MULASGN//DIVASGN//REMASGN//LSHIFTASGN//RSHIFTASGN/)2v3 = <assign_hp ((v1)s2) <ASSIGN_expr v3>>  
  v1 = <COND_expr v1>

COND_expr
  v1 = <cond_base_hp <cond_hp v1>>

OR_expr
  R v1/OR/v2 = <bool_or (<bool <OR_expr v1>>) <bool <AND_expr v2>>>
  e1 = <AND_expr e1>

AND_expr
  R v1/AND/v2 = <bool_and (<bool <AND_expr v1>>) <bool <EQ_expr v2>>>
  e1 = <EQ_expr e1>

EQ_expr
  R v1s(/EQ//NE/)2v3 = <eq_hp <EQ_expr v1> s2 <GE_expr v3>>
  e1 = <GE_expr e1>

GE_expr
  R v1s('<>'/GE//LE/)2v3 = <ge_hp <GE_expr v1> s2 <SHIFT_expr v3>>
  e1 = <SHIFT_expr e1>

SHIFT_expr
  R v1s(/LSHIFT//RSHIFT/)2v3 = <shift_hp <SHIFT_expr v1> s2 <SUM_expr v3>>
  e1 = <SUM_expr e1>

SUM_expr
  R v1s('+-')2v3 = <sum_hp <SUM_expr v1> s2 <MUL_expr v3>>
  R e1 = <MUL_expr e1>

MUL_expr
  R v1s('*/%')2v3 = <mul_hp <MUL_expr v1> s2 <UNARY_expr v3>>
  R e1            = <UNARY_expr e1>

UNARY_expr
  s('!'/UPLUS//UMINUS/)1v2 = <unary_hp s1 <UNARY_expr v2>>
  s(/PP//MM/)1v2           = <unary_hp s1 v2>
  e1                       = <POSTFIX_expr e1>

POSTFIX_expr
  R v1s(/PP//MM/)2 = <postfix_xx (v1)s2>
  e1 = <PRIME_expr e1>

PRIME_expr
  (v1)  = <MAIN_expr v1>
  v(D)1 = <cvb v1>
  s('_'L)1e('_'LD)2 = <storage_get s1e2>

preprocess
  e1 = <parentheses <escape_unary <clean_ws <escape e1>>>>

parentheses
  e1')'e2 = <parentheses <parentheses_hp e1> e2>
  e1      = e1

parentheses_hp
  R e1'('e2 = e1(e2)

escape
  e1'+='e2  = <escape e1/PLUSASGN/e2>
  e1'-='e2  = <escape e1/MINUSASGN/e2>
  e1'/='e2  = <escape e1/DIVASGN/e2>
  e1'%='e2  = <escape e1/REMASGN/e2>
  e1'<<='e2 = <escape e1/LSHIFTASGN/e2>
  e1'>>='e2 = <escape e1/RSHIFTASGN/e2>
  e1'=='e2  = <escape e1/EQ/e2>
  e1'!='e2  = <escape e1/NE/e2>
  e1'>='e2  = <escape e1/GE/e2>
  e1'<='e2  = <escape e1/LE/e2>
  e1'<<'e2  = <escape e1/LSHIFT/e2>
  e1'>>'e2  = <escape e1/RSHIFT/e2>
  e1'++'e2  = <escape e1/PP/e2>
  e1'--'e2  = <escape e1/MM/e2>
  e1'&&'e2  = <escape e1/AND/e2>
  e1'||'e2  = <escape e1/OR/e2>
  e1        = e1

escape_unary
  '-'e1 = <escape_unary /UMINUS/e1>
  '+'e1 = <escape_unary /UPLUS/e1>
  e1s(('_)'DL))2'-'e3 = <escape_unary e1s2/UMINUS/e3>
  e1s(('_)'DL))2'+'e3 = <escape_unary e1s2/UPLUS/e3>
  e1                  = e1

clean_ws
  e1' 'e2 = <clean_ws e1 e2>
  e1      = e1

not_hp
  '-'v1 = <bool_eq <nrel (/0/) v1>>
  v1 = <bool_eq <nrel (/0/) v1>>

bool
  v1 = <not_hp <not_hp v1>>

bool_and
  (/0/)/0/ = /0/
  (/0/)/1/ = /0/
  (/1/)/0/ = /0/
  (/1/)/1/ = /1/

bool_or
  (/0/)/0/ = /0/
  (/0/)/1/ = /1/
  (/1/)/0/ = /1/
  (/1/)/1/ = /1/

bool_eq
  s('=')1v2 = /1/
  e1    = /0/

bool_ne
  s('<>')1v2 = /1/
  e1         = /0/

bool_lt
  s('<')1v2 = /1/
  e1        = /0/

bool_le
  s('<=')1v2 = /1/
  e1         = /0/

bool_ge
  s('>=')1v2 = /1/
  e1         = /0/

bool_gt
  s('>')1v2 = /1/
  e1        = /0/

unpack_last_hp
  e1(e2) = e2

mul_hp
  v1'*'v2 = <mul (v1) v2>
  v1'/'v2 = <div (v1) v2>
  v1'%'v2 = <unpack_last_hp <dr (v1) v2>>

sum_hp
  v1'+'v2 = <add (v1) v2>
  v1'-'v2 = <sub (v1) v2>

unary_hp
  s(/PP//MM/)1v2 = <prefix_xx (s1)v2>
  /UMINUS/v1     = <SUB (/0/) v1>
  /UPLUS/v1      = v1
  '!'v1          = <not_hp v1>

shift_hp
  v1s(/RSHIFT//LSHIFT/)2/0/ = v1
  v1s(/RSHIFT//LSHIFT/)2'-'e3 = <prout 'shift by negative'><error>
  v1s(/RSHIFT/)2v3 = <shift_hp <div (v1) /2/> /RSHIFT/ <M1 v3>>
  v1s(/LSHIFT/)2v3 = <shift_hp <mul (v1) /2/> /LSHIFT/ <M1 v3>>

ge_hp
  v1s('>')2v3 = <bool_gt <nrel (v1) v3>>
  v1s('<')2v3 = <bool_lt <nrel (v1) v3>>
  v1s(/GE/)2v3 = <bool_ge <nrel (v1) v3>>
  v1s(/LE/)2v3 = <bool_le <nrel (v1) v3>>

eq_hp
  v1s(/EQ/)2v3 = <bool_eq <nrel (v1) v3>>
  v1s(/NE/)2v3 = <bool_ne <nrel (v1) v3>>

cond_hp
  v1'?'v2 = (<bool <OR_expr v1>>)<cond_sum_hp (/0/)()v2>
  v1 = (/2/)<OR_expr v1>

cond_sum_hp
  ('-'/1/)(v1':')v2 = (v1)v2
  (/0/)()v1s('?:')2v3 = <cond_sum_hp (<cond_sum_next_hp (/0/) s2>)(v1 s2)v3>
  (s(N)1)(v2)v3s('?:')4v5 = <cond_sum_hp (<cond_sum_next_hp (s1) s4>)(v2 v3 s4)v5 >

cond_sum_next_hp
  (s(N)1)'?' = <add (s1) /1/>
  (s(N)1)':' = <sub (s1) /1/>

cond_base_hp
  (/1/)(v1)v2 = <COND_expr v1>
  (/0/)(v1)v2 = <COND_expr v2>
  (/2/)v1 = v1

assign_hp
  ((s('_'L)1e('_'LD)2)s3)v4 = <assign_do ((s1e2)s3)v4>

assign_do
  ((v1)'=')v3 = <storage_put (v1)v3>
  ((v1)/PLUSASGN/)v3 = <storage_put (v1)<ADD (<storage_get v1>) v3>>
  ((v1)/MINUSASGN/)v3 = <storage_put (v1)<SUB (<storage_get v1>) v3>>
  ((v1)/MULASGN/)v3 = <storage_put (v1)<MUL (<storage_get v1>) v3>>
  ((v1)/DIV/)v3 = <storage_put (v1)<DIV (<storage_get v1>) v3>>
  ((v1)/REMASGN/)v3 = <storage_put (v1)<mul_hp <storage_get v1> '%' v3>>
  ((v1)/LSHIFTASGN/)v3 = <storage_put (v1)<shift_hp <storage_get v1> /LSHIFT/ v3>>
  ((v1)/RSHIFTASGN/)v3 = <storage_put (v1)<shift_hp <storage_get v1> /RSHIFT/ v3>>
  
storage_put
  (v1)v(N)2 = <rp '_'v1 '=' v2>v2
  (v1)'-'v(N)2 = <rp '_'v1 '=' '-'v2>'-'v2
  (v1)e2 = <prout 'incorrect value 'e2>

storage_get
  v1 = <check_value (v1)<cp '_'v1>>

prefix_xx
  (/PP/)v1 = <assign_hp ((v1)/PLUSASGN/)/1/>
  (/MM/)v1 = <assign_hp ((v1)/MINUSASGN/)/1/>

postfix_xx
  (v1)/PP/ = <sub (<prefix_xx (/PP/)v1>) /1/>
  (v1)/MM/ = <add (<prefix_xx (/MM/)v1>) /1/>

check_value
  (v1)v2 = v2
  (v1)e2 = <prout 'use of undeclared identifier 'v1><error>

  end
