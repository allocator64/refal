* MAIN_expr ::= ASSIGN_expr | MAIN_expr , ASSIGN_expr
* ASSIGN_expr ::= COND_expr | VAR ASSIGN_op ASSIGN_expr
* ASSIGN_op ::= = | += | -= | *= | /= | %= | <<= | >>=
* COND_expr ::= OR_expr | OR_expr ? COND_expr : COND_expr
* OR_expr ::= BINARY_AND_expr | OR_expr || BINARY_AND_expr
* AND_expr ::= EQ_expr | AND_expr && EQ_expr
* EQ_expr ::= GE_expr | EQ_expr EQ_op GE_expr
* EQ_op ::= == | !=
* GE_expr ::= SHIFT_expr | GE_expr GE_op SHIFT_expr
* GE_op ::= < | <= | > | >=
* SHIFT_expr ::= SUM_expr | SHIFT_expr SHIFT_op SUM_expr
* SHIFT_op ::= << | >>
* SUM_expr ::= MUL_expr | SUM_expr SUM_op MUL_expr
* SUM_op ::= + | -
* MUL_expr ::= UNARY_expr | MUL_expr MUL_op UNARY_expr
* MUL_op ::= * | / | %
* UNARY_expr ::= POSTFIX_expr | UNARY_op UNARY_expr
* UNARY_op ::= ! | ++ | -- | + | -
* POSTFIX_expr ::= PRIME_expr | POSTFIX1_expr
* POSTFIX1_expr ::= VAR | POSTFIX1_expr POSTFIX1_op
* POSTFIX1_op ::= ++ | --
* PRIME_expr ::= VAR | DIGITS | (MAIN_expr)


  start
  entry go
  extrn NUMB,SYMB,CVD,CVB,FIRST,LAST
  extrn DIV,MUL,ADD,SUB,NREL,DR,M1
  extrn PROUT,CARD,PROUTM,ERROR
  empty PLUSASSIGN, MINUSASSIGN, MULASSIGN, DIVASSIGN, REMASSIGN, LSHIFTASSIGN, RSHIFTASSIGN, EQ, NE, GE, LE, LSHIFT, RSHIFT, PP, MM, OR, AND

go = <proutm <eval <card>>>

eval
  e1 = <cvd <MAIN_expr <preprocess e1>>>

MAIN_expr
  e1 = <ASSIGN_expr e1>

ASSIGN_expr
  e1 = <COND_expr e1>

COND_expr
  e1 = <OR_expr e1>

OR_expr
  R v1/OR/v2 = <bool_or (<bool <OR_expr v1>>) <bool <AND_expr v2>>>
  e1 = <AND_expr e1>

AND_expr
  R v1/AND/v2 = <bool_and (<bool <AND_expr v1>>) <bool <EQ_expr v2>>>
  e1 = <EQ_expr e1>

EQ_expr
  R v1s(/EQ//NE/)2v3 = <eq_hp <EQ_expr v1> s2 <GE_expr v3>>
  e1 = <GE_expr e1>

GE_expr
  R v1s('<>'/GE//LE/)2v3 = <ge_hp <GE_expr v1> s2 <SHIFT_expr v3>>
  e1 = <SHIFT_expr e1>

SHIFT_expr
  R v1s(/LSHIFT//RSHIFT/)2v3 = <shift_hp <SHIFT_expr v1> s2 <SUM_expr v3>>
  e1 = <SUM_expr e1>

SUM_expr
  R v1s('+-')2v3 = <sum_hp <SUM_expr v1> s2 <MUL_expr v3>>
  R e1 = <MUL_expr e1>

MUL_expr
  R v1s('*/%')2v3 = <mul_hp <MUL_expr v1> s2 <UNARY_expr v3>>
  R e1            = <UNARY_expr e1>

UNARY_expr
  R s('-+!')1v2 = <unary_hp s1 <UNARY_expr v2>>
  R e1          = <POSTFIX_expr e1>

POSTFIX_expr
  e1 = <PRIME_expr e1>

PRIME_expr
  (e1)  = <MAIN_expr e1>
  e(D)1 = <cvb e1>

preprocess
  e1 = <parentheses <escape e1>>

parentheses
  e1')'e2 = <parentheses <parentheses_hp e1> e2>
  e1      = e1

parentheses_hp
  R e1'('e2 = e1(e2)

escape
  e1'+='e2  = <escape e1/PLUSASSIGN/e2>
  e1'-='e2  = <escape e1/MINUSASSIGN/e2>
  e1'/='e2  = <escape e1/DIVASSIGN/e2>
  e1'%='e2  = <escape e1/REMASSIGN/e2>
  e1'<<='e2 = <escape e1/LSHIFTASSIGN/e2>
  e1'>>='e2 = <escape e1/RSHIFTASSIGN/e2>
  e1'=='e2  = <escape e1/EQ/e2>
  e1'!='e2  = <escape e1/NE/e2>
  e1'>='e2  = <escape e1/GE/e2>
  e1'<='e2  = <escape e1/LE/e2>
  e1'<<'e2  = <escape e1/LSHIFT/e2>
  e1'>>'e2  = <escape e1/RSHIFT/e2>
  e1'++'e2  = <escape e1/PP/e2>
  e1'--'e2  = <escape e1/MM/e2>
  e1'&&'e2  = <escape e1/AND/e2>
  e1'||'e2  = <escape e1/OR/e2>
  e1        = e1

not_hp
  '-'v1 = <bool_eq <nrel (/0/) v1>>
  v1 = <bool_eq <nrel (/0/) v1>>

bool
  v1 = <not_hp <not_hp v1>>

bool_and
  (/0/)/0/ = /0/
  (/0/)/1/ = /0/
  (/1/)/0/ = /0/
  (/1/)/1/ = /1/

bool_or
  (/0/)/0/ = /0/
  (/0/)/1/ = /1/
  (/1/)/0/ = /1/
  (/1/)/1/ = /1/

bool_eq
  s('=')1v2 = /1/
  e1    = /0/

bool_ne
  s('<>')1v2 = /1/
  e1         = /0/

bool_lt
  s('<')1v2 = /1/
  e1        = /0/

bool_le
  s('<=')1v2 = /1/
  e1         = /0/

bool_ge
  s('>=')1v2 = /1/
  e1         = /0/

bool_gt
  s('>')1v2 = /1/
  e1        = /0/

unpack_last_hp
  e1(e2) = e2

mul_hp
  v1'*'v2 = <mul (v1) v2>
  v1'/'v2 = <div (v1) v2>
  v1'%'v2 = <unpack_last_hp <dr (v1) v2>>

sum_hp
  v1'+'v2 = <add (v1) v2>
  v1'-'v2 = <sub (v1) v2>

unary_hp
  '-'v1 = <SUB (/0/) v1>
  '+'v1 = v1
  '!'v1 = <not_hp v1>

shift_hp
  v1s(/RSHIFT//LSHIFT/)2/0/ = v1
  v1s(/RSHIFT//LSHIFT/)2'-'e3 = <prout 'shift by negative'><error>
  v1s(/RSHIFT/)2v3 = <shift_hp <div (v1) /2/> /RSHIFT/ <M1 v3>>
  v1s(/LSHIFT/)2v3 = <shift_hp <mul (v1) /2/> /LSHIFT/ <M1 v3>>

ge_hp
  v1s('>')2v3 = <bool_gt <nrel (v1) v3>>
  v1s('<')2v3 = <bool_lt <nrel (v1) v3>>
  v1s(/GE/)2v3 = <bool_ge <nrel (v1) v3>>
  v1s(/LE/)2v3 = <bool_le <nrel (v1) v3>>

eq_hp
  v1s(/EQ/)2v3 = <bool_eq <nrel (v1) v3>>
  v1s(/NE/)2v3 = <bool_ne <nrel (v1) v3>>

  end